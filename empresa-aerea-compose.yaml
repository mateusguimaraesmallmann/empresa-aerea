version: '3.8'

services:
  # ================= DATA BASES =================
  mongo-db:
    image: mongo
    container_name: mongo-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongo-data:/data/db
    networks:
      - empresa-aerea-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-db:
    image: postgres
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./back-end/init-databases:/docker-entrypoint-initdb.d
    networks:
      - empresa-aerea-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ================ RABBIT MQ =====================
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - empresa-aerea-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============== MICROSERVIÃ‡OS ===============
  # =============== AUTH ========================
  ms-auth:
    build:
      context: ./back-end/ms-auth
      dockerfile: Dockerfile
    container_name: ms-auth
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_HOST: mongo-db
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: auth_db
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin@mongo-db:27017/auth_db?authSource=admin
    depends_on:
      mongo-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - empresa-aerea-net

  # =============== CLIENTE ===============
  ms-cliente:
    build:
      context: ./back-end/ms-cliente
      dockerfile: Dockerfile
    container_name: ms-cliente
    ports:
      - "8081:8081"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - empresa-aerea-net

  # =============== FUNCIONARIO ===============
  ms-funcionario:
    build:
      context: ./back-end/ms-funcionario
      dockerfile: Dockerfile
    container_name: ms-funcionario
    ports:
      - "8082:8082"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - empresa-aerea-net
    environment:
      
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/funcionario
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

      
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbitmq
      SPRING_RABBITMQ_PASSWORD: rabbitmq

      
      APP_MQ_FILA_FUNCIONARIOS: fila-funcionarios

  # =============== RESERVA ===============
  ms-reserva:
    build:
      context: ./back-end/ms-reserva
      dockerfile: Dockerfile
    container_name: ms-reserva
    ports:
      - "8083:8083"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - empresa-aerea-net

  # =============== VOOS ===============
  ms-voos:
    build:
      context: ./back-end/ms-voos
      dockerfile: Dockerfile
    container_name: ms-voos
    ports:
      - "8084:8084"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - empresa-aerea-net

#================ SAGA ======================
  saga:
    build:
      context: ./back-end/saga
      dockerfile: Dockerfile
    container_name: saga
    ports:
      - "8085:8085"
    depends_on:
      mongo-db:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - empresa-aerea-net

# =============== API GATEWAY ===============
  api-gateway:
    build:
      context: ./back-end/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - ms-auth
      - ms-cliente
      - ms-funcionario
      - ms-reserva
      - ms-voos
      - saga
    env_file:
      - ./back-end/api-gateway/.env
    networks:
      - empresa-aerea-net

 # =============== FRONTEND ===============
  angular-frontend:
    container_name: frontend
    build:
      context: ./front-end/
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    volumes:
      - ./front-end:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - empresa-aerea-net

# =============== NETWORK ===============
networks:
  empresa-aerea-net:
    driver: bridge

# =============== VOLUMES ===============
volumes:
  rabbitmq-data:
  postgres-data:
  mongo-data:
